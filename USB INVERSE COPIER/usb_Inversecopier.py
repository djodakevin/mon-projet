import os
import shutil
from time import sleep
import ctypes  # Pour la notification Windows

# Configuration
SOURCE_DIR = r"C:\Users\HP\Desktop\KALI"  # R√©pertoire source
USB_NAME = "WINSETUP"                      # Nom de la cl√© USB cible

def show_notification(title, message):
    """Affiche une notification Windows"""
    ctypes.windll.user32.MessageBoxW(0, message, title, 0x40)  # 0x40 = Ic√¥ne d'information

def find_usb_drive():
    """Trouve le lecteur de la cl√© USB par son nom"""
    for drive in range(ord('A'), ord('Z') + 1):
        drive_letter = chr(drive) + ":"
        if os.path.exists(drive_letter):
            try:
                import win32api
                vol_name = win32api.GetVolumeInformation(drive_letter + os.sep)[0]
                if vol_name and USB_NAME in vol_name:
                    return drive_letter + "\\"
            except ImportError:
                # M√©thode alternative sans win32api
                if os.path.exists(os.path.join(drive_letter, "WINSETUP.tag")):
                    return drive_letter + "\\"
    return None

def copy_to_usb(source, usb_path):
    """Copie r√©cursive du r√©pertoire source vers la cl√© USB"""
    total_files = 0
    for root, dirs, files in os.walk(source):
        total_files += len(files)
    
    copied_files = 0
    errors = 0
    
    for item in os.listdir(source):
        src = os.path.join(source, item)
        dest = os.path.join(usb_path, item)
        
        try:
            if os.path.isdir(src):
                shutil.copytree(src, dest, dirs_exist_ok=True)
                copied_files += len([f for f in os.listdir(src) if os.path.isfile(os.path.join(src, f))])
            else:
                shutil.copy2(src, dest)
                copied_files += 1
            print(f"‚úì {src} ‚Üí {dest}")
        except Exception as e:
            print(f"‚úó Erreur sur {src}: {str(e)}")
            errors += 1
    
    return total_files, copied_files, errors

if __name__ == "__main__":
    print(f"üîç Recherche de la cl√© USB '{USB_NAME}'...")
    
    try:
        while True:
            usb_drive = find_usb_drive()
            if usb_drive:
                print(f"‚úÖ Cl√© trouv√©e sur {usb_drive}")
                print("üîÑ D√©but de la copie...")
                
                # V√©rifie si le r√©pertoire source existe
                if not os.path.exists(SOURCE_DIR):
                    print(f"‚ùå Erreur: Le r√©pertoire source {SOURCE_DIR} n'existe pas")
                    show_notification("Erreur", f"Le r√©pertoire {SOURCE_DIR} est introuvable")
                    break
                
                # Cr√©e le r√©pertoire sur la cl√© si n√©cessaire
                if not os.path.exists(usb_drive):
                    os.makedirs(usb_drive)
                
                total, success, errors = copy_to_usb(SOURCE_DIR, usb_drive)
                
                # Message final d√©taill√©
                result_msg = (
                    f"üìä R√©sultat de la copie :\n"
                    f"‚Ä¢ Fichiers √† copier : {total}\n"
                    f"‚Ä¢ Fichiers copi√©s : {success}\n"
                    f"‚Ä¢ Erreurs : {errors}\n"
                    f"‚Ä¢ R√©pertoire source : {SOURCE_DIR}\n"
                    f"‚Ä¢ Destination : {usb_drive}"
                )
                
                print("\n" + "="*50)
                print("‚úÖ COPIE TERMIN√âE AVEC SUCC√àS")
                print(result_msg)
                print("="*50)
                
                # Notification Windows
                show_notification("Copie termin√©e", 
                    f"La copie de {SOURCE_DIR} vers {usb_drive} est termin√©e\n"
                    f"{success} fichiers copi√©s, {errors} erreurs")
                break
            else:
                print("‚è≥ Cl√© non d√©tect√©e. Nouvelle tentative dans 5 secondes... (Ctrl+C pour quitter)")
                sleep(5)
    
    except KeyboardInterrupt:
        print("\nüõë Op√©ration annul√©e par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {str(e)}")
        show_notification("Erreur", f"Une erreur est survenue : {str(e)}")